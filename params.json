{"name":"Aalib.js","tagline":"ASCII art library in JavaScript","body":"# aalib.js\r\n\r\nThis library allows to automatically convert images and movies to [ASCII art](https://en.wikipedia.org/wiki/ASCII_art).\r\n\r\nIt is written entirely in JavaScript and is intended to use in web browsers.\r\n\r\n## Examples\r\n\r\n* [Mona](https://cdn.rawgit.com/mir3z/aalib.js/master/examples/mona.html)\r\n* [Lenna](https://cdn.rawgit.com/mir3z/aalib.js/master/examples/lenna.html)\r\n* [Marylin](https://cdn.rawgit.com/mir3z/aalib.js/master/examples/marylin.html)\r\n* [Big Buck Bunny](https://cdn.rawgit.com/mir3z/aalib.js/master/examples/bbb.html)\r\n\r\nIf you have any troubles seeing examples, just clone the repository and browse them locally. \r\n\r\n## Usage\r\n\r\nThe library uses streams to process images. This means that an image is firstly read and then passed through a stream.\r\nA stream consists of processors which can read data from its input, process, and write to output. Chaining processors \r\ntogether makes a series of transformations which eventually lead to ASCII art. \r\n\r\nIn general the stream has the following form:\r\n\r\n`Reader` >> `Filter` >> `AA` >> `Filter` >> `Renderer`\r\n\r\nThis means what follows:\r\n\r\n1. `Reader` reads image (static or moving) and converts it to internal representation.\r\n2. (Optional) `Filter` (e.g. brightness or contrast) can be applied to the image from 1st step.\r\n3. `AA` transforms image from 2nd step to ASCII art.\r\n4. (Optional) Another `Filter` can be applied but in this step it is applied to ASCII art image.\r\n5. `Renderer` renders image from 4th step to given output.\r\n\r\nThat is how it looks expressed in a code:\r\n\r\n```javascript\r\naalib.read.image.fromURL(\"marylin.jpg\")\r\n    .pipe(aalib.filter.contrast(0.9))\r\n    .pipe(aalib.aa({ width: 530, height: 160 }))\r\n    .pipe(aalib.filter.brightness(10))\r\n    .pipe(aalib.render.html({ el: document.querySelector(\".aa-image\") }))\r\n    .end();\r\n```\r\n\r\nSee [API](#api) section for more details on how processors work. \r\n\r\n## API\r\n\r\n### Readers\r\n\r\nThese are objects which allow to read from various sources and write to a stream.  \r\n\r\n#### ImageReader\r\n \r\nExposed in `aalib.read.image`\r\n \r\nIt has two handy factory methods:\r\n\r\n* <code>fromURL(<i>url:string</i>)</code> - creates `ImageReader` which reads from given URL and returns stream.\r\n* <code>fromImg(<i>img:HTMLImageElement</i>)</code> - creates `ImageReader` which reads from given `HTMLImageElement` \r\nand returns stream.\r\n\r\n#### VideoReader\r\n\r\nExposed in `aalib.read.video`\r\n \r\nIt has two handy factory methods:\r\n\r\n* <code>fromURL(<i>url:string</i>, <i>options:object</i>)</code> - creates `VideoReader` which reads from given URL \r\nand returns stream/\r\n* <code>fromVideoElement(<i>video:HTMLVideoElement</i>, <i>options:object</i>)</code> - creates `VideoReader` which \r\nreads from given `HTMLVideoElement` and returns stream.\r\n\r\nBoth methods accepts following options:\r\n\r\n* `autoplay:boolean` - If `true`, start playing video automatically\r\n\r\n`aalib.read.video`\r\n\r\n### Filters\r\n\r\nFilters are processors which changes every component of an image. When a filter is applied to a regular image it \r\nchanges a RGB value. When a filter is applied to ASCII art image it changes the only component the image\r\nhas - intensity. Intensity is a value which tells whether part of an image should be rendered as a \"dark\" or \"light\" \r\ncharacter.\r\n\r\n#### inverse\r\n\r\n<code>aalib.filter.inverse()</code>\r\n\r\nThis filter inverses each component of an image. By inversion I mean the following function: `f(x) = 255 - x` \r\n\r\n#### linear\r\n\r\n<code>aalib.filter.linear(<i>a:number</i>, <i>b:number</i>)</code>\r\n\r\nIt applies linear transformation to every image component. The linear transformation is a function: `f(x) = ax + b`\r\n\r\n#### brightness\r\n\r\n<code>aalib.filter.brightness(<i>value:number</i>)</code>\r\n\r\nIt changes brightness of an image. This is a special case of linear filter where `a = 1`.\r\n\r\n#### contrast\r\n\r\n<code>aalib.filter.contrast(<i>value:number</i>)</code>\r\n\r\nIt changes contrast of an image. This is a special case of linear filter where `b = 0`.\r\n\r\n### AA\r\n\r\nThis processor handles actual conversion to ASCII art image.\r\n\r\n<code>aalib.aa(<i>options:object</i>)</code>\r\n\r\nIt accepts the following options:\r\n\r\n* `width:number` - width (in characters) of target ASCII art image.\r\n* `height:number` - height (in characters) of target ASCII art image.\r\n* `colorful:boolean` - if `true`, colors of an original image are preserved. Every character in target image has a\r\nmean color of area it represents in an original image.\r\n\r\n### Renderers\r\n\r\nRenderers are used to output ASCII art image. They can render using different characters set. \r\nBy default two charsets are defined and exposed under `CHARSET` property of every renderer:\r\n\r\n* `ASCII` - printable ASCII characters - range: <32, 127>. This is the default one.\r\n* `SIMPLE` - characters from list `['.', ':', '*', 'I', '$', 'V', 'F', 'N', 'M']`.\r\n\r\n#### HTMLRenderer\r\n\r\n<code>aalib.render.html(<i>options:object</i>)</code>\r\n\r\nRenders ASCII art image as HTML element.\r\n\r\nOptions:\r\n\r\n* `tagName:string` - use this tag to render HTML element, default: `pre`.\r\n* `el:HTMLElement` - if defined, use this element as render target. Otherwise create a new element defined in `tagName`.\r\n* `fontFamily:string` - font used in rendering, default: `monospace`.\r\n* `charset:string[]` - alphabet used in rendering, default: printable ASCII characters (range <32, 127>)\r\n\r\n#### CanvasRenderer\r\n\r\n<code>aalib.render.canvas(<i>options:object</i>)</code>\r\n\r\nRenders ASCII art image as Canvas element.\r\n\r\nOptions:\r\n\r\n* `fontSize:number` - defines font size, default: 7.\r\n* `lineHeight:number` - defines line height, default: 7.\r\n* `width:number` - defines canvas width in pixels, default: 400.\r\n* `height:number` - defines canvas height in pixels, default: 300.\r\n* `el:HTMLElement` - if defined, use this element as render target. Otherwise create a new one.\r\n* `fontFamily:string` - font used in rendering, default: `monospace`.\r\n* `charset:string[]` - alphabet used in rendering, default: `ASCII` charset.\r\n\r\n## License\r\nThe MIT License (MIT). Copyright (c) 2015 mirz (mirz.hq@gmail.com)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}